@{
    ViewData["Title"] = "Demo";
}
    
<h1>Demo</h1>

@section Styles{
<style>

</style>
}

@section Scripts{
<script>
    //等1秒印出A，再等1秒印出B、再等1秒印出C
    //setTimeout(() => {
    //    console.log("A");
    //        setTimeout(() => {
    //            console.log("B");
    //            setTimeout(() => {
    //                console.log("C");
    //            }, 1000)
    //        }, 1000)
    //    },1000)


    //window.setTimeout(callback function,1000)

    //eg., callback
    //btn.AddEventListener('click',callback)

    //物件的建立
    const promise = new Promise((resolve, reject) => { //resolve: a callback function;
        //async codes
        if (true) {// 如果程式碼執行沒有問題
                resolve("success") //傳到 data
        } else {
                reject("fail") //
        }
    })

    promise.then((data) => {
        console.log(data)
    }).catch(()=>{
        console.log(err)
    }).finally(() => {
        console.log("end")
    })

    function printSomething(data){
    const promise = new Promise((resolve, reject) => {
        setTimeout(()=>{
            resolve(data)
        },1000)
    })
    return promise
    }

  
    //printSomething("A")
    //.then((data)=>{
    //    console.log(data)
    //    return printSomething("B")
    //})
    //.then((data) => {
    //    console.log(data)
    //    return printSomething("C")
    //})
    //.then((data) => {
    //    console.log(data)
    //})

    //循序非同步 ES7 async await 
    //const data callApi();

    //async function show() {
    //let data = await printSomething("A")
    //    console.log(data)
    //    data = await printSomething("B")
    //    console.log(data)
    //    data = await printSomething("C")
    //    console.log(data)
    //}
    //show();

    //IIFF 網頁載入立即執行
    (async()=> {
        let data = await printSomething("A")
        console.log(data)
        data = await printSomething("B")
        console.log(data)
        data = await printSomething("C")
        console.log(data)
        data = await printSomething("D")
        console.log(data)
    }) ();
        
</script>
}